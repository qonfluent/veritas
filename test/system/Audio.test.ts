/*

An audio system consists of a set of virtual audio sources and a set of physical audio sources,
as well as a set of listening volumes. The audio system places all of these within a shared
audio space, and attempts to maintain the pressure map of each listening volume as closely
as possible to the pressure map generated by the virtual audio sources.

Each virtual audio source is a spherical pressure over time map emitted from a point in space.
Each physical audio source is a physical speaker with a given position in space and measured
spherical gain map.
Each listening volume is an arbitrary volume in space with a given boundary triangle mesh,
inside of which the system attempts to maintain the calculated pressure map

The audio system is responsible for converting virtual audio sources to physical audio sources.

The audio system connects to a network of audio nodes. Each node can add or remove physical or
virtual audio sources to the shared space.

Functionality is provided to convert traditional N channel audio to a virtual audio source.
Functionality is provided to convert ambisonic audio to a virtual audio source.

*/

export type Vector3 = { x: number, y: number, z: number }
export type Quaternion = { x: number, y: number, z: number, w: number }

// An audio space is a volume in which a set of nodes have synchronized audio sources
// The audio space is responsible for converting virtual audio sources to physical audio sources
export type AudioSpace = {
	virtual: VirtualAudioSource[]
	physical: PhysicalAudioSource[]
	volume: ListeningVolume
	model: SpatialAudioModel
}

// A virtual audio source is a spherical pressure over time map emitted from a volume in space
export type VirtualAudioSource = {
	position: Vector3
	rotation: Quaternion
	map: GainMap
}

export type GainMap = {
	// A gain map is a set of theta/rho/gain values
	// Theta is the right hand angle around the up axis, rho is the angle from the horizontal plane
	// Pressure is the gain in that direction at the given radius, relative to the average volume of the emitter
	// The gain is in decibels, so 0 is no change, -6 is half volume, 6 is double volume. This value should be
	// represented as a fixed point of some size rescaled to the range of [-50, 205] inclusive.

	// The gain map is a set of theta/rho/gain values, here with gain as a float
	map: { theta: number, rho: number, gain: number }[]
}

export type PhysicalAudioSource = {
}

export type ListeningVolume = {
}

export type SpatialAudioModel = {
}
