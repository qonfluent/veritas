import assert from 'assert'
import { CommandNode, TextNode } from '../../src/system/AST'
import { TextCursor } from '../../src/system/Cursor'
import { DocumentParser, ParserOptions } from '../../src/system/Parser'

describe('Document Parser', () => {
	const opts: ParserOptions = {
		command: '@',
		comment: ';',
		spaces: [' ', '\t'],
		newlines: ['\n', '\r'],
		parens: [['(', ')'], ['[', ']'], ['{', '}']],
	}

	const parser = new DocumentParser(opts)

	describe('Simple text', () => {
		it('Can parse a blank document', () => {
			const cursor = new TextCursor('')
			const result = parser.parse(cursor)
			expect(result).not.toBeUndefined()
			expect(result?.nodes).toHaveLength(0)
		})

		it('Can parse a document with a single text node', () => {
			const cursor = new TextCursor('Hello')
			const result = parser.parse(cursor)
			expect(result).not.toBeUndefined()
			expect(result?.nodes).toHaveLength(1)
			assert(result?.nodes[0] instanceof TextNode)
			expect(result?.nodes[0].text).toBe('Hello')
		})
	})

	describe('Commands', () => {
		describe('Simple commands', () => {
			it('Can parse a document with a single command node', () => {
				const cursor = new TextCursor('@command')
				const result = parser.parse(cursor)
				expect(result).not.toBeUndefined()
				expect(result?.nodes).toHaveLength(1)
				assert(result?.nodes[0] instanceof CommandNode)
				expect(result?.nodes[0].command).toBe('command')
			})

			it('Can parse a document with a single command node with an argument', () => {
				const cursor = new TextCursor('@command(1)')
				const result = parser.parse(cursor)
				expect(result).not.toBeUndefined()
				expect(result?.nodes).toHaveLength(1)
				assert(result?.nodes[0] instanceof CommandNode)
				expect(result?.nodes[0].command).toBe('command')
				expect(result?.nodes[0].args).toHaveLength(1)
				expect(result?.nodes[0].args[0].open).toBe('(')
				expect(result?.nodes[0].args[0].close).toBe(')')
				expect(result?.nodes[0].args[0].document.nodes).toHaveLength(1)
				assert(result?.nodes[0].args[0].document.nodes[0] instanceof TextNode)
				expect(result?.nodes[0].args[0].document.nodes[0].text).toBe('1')
			})

			it('Can parse a document with a single command node with multiple arguments', () => {
				const cursor = new TextCursor('@command(1)(2)')
				const result = parser.parse(cursor)
				expect(result).not.toBeUndefined()
				expect(result?.nodes).toHaveLength(1)
				assert(result?.nodes[0] instanceof CommandNode)
				expect(result?.nodes[0].command).toBe('command')
				expect(result?.nodes[0].args).toHaveLength(2)
				expect(result?.nodes[0].args[0].open).toBe('(')
				expect(result?.nodes[0].args[0].close).toBe(')')
				expect(result?.nodes[0].args[0].document.nodes).toHaveLength(1)
				assert(result?.nodes[0].args[0].document.nodes[0] instanceof TextNode)
				expect(result?.nodes[0].args[0].document.nodes[0].text).toBe('1')
				expect(result?.nodes[0].args[1].open).toBe('(')
				expect(result?.nodes[0].args[1].close).toBe(')')
				expect(result?.nodes[0].args[1].document.nodes).toHaveLength(1)
				assert(result?.nodes[0].args[1].document.nodes[0] instanceof TextNode)
				expect(result?.nodes[0].args[1].document.nodes[0].text).toBe('2')
			})

			it('Can test a simple command', () => {
				const cursor = new TextCursor('@bold{Hello World}')
				const result = parser.parse(cursor)
				expect(result).not.toBeUndefined()
				expect(result?.nodes).toHaveLength(1)
				assert(result?.nodes[0] instanceof CommandNode)
				expect(result?.nodes[0].command).toBe('bold')
				expect(result?.nodes[0].args).toHaveLength(1)
				expect(result?.nodes[0].args[0].open).toBe('{')
				expect(result?.nodes[0].args[0].close).toBe('}')
				expect(result?.nodes[0].args[0].document.nodes).toHaveLength(1)
				assert(result?.nodes[0].args[0].document.nodes[0] instanceof TextNode)
				expect(result?.nodes[0].args[0].document.nodes[0].text).toBe('Hello World')
			})
		})

		describe('Nested commands', () => {
			it('Can parse a document with a single command node with a nested command', () => {
				const cursor = new TextCursor('@command(@nested)')
				const result = parser.parse(cursor)
				expect(result).not.toBeUndefined()
				expect(result?.nodes).toHaveLength(1)
				assert(result?.nodes[0] instanceof CommandNode)
				expect(result?.nodes[0].command).toBe('command')
				expect(result?.nodes[0].args).toHaveLength(1)
				expect(result?.nodes[0].args[0].open).toBe('(')
				expect(result?.nodes[0].args[0].close).toBe(')')
				expect(result?.nodes[0].args[0].document.nodes).toHaveLength(1)
				assert(result?.nodes[0].args[0].document.nodes[0] instanceof CommandNode)
				expect(result?.nodes[0].args[0].document.nodes[0].command).toBe('nested')
			})
		})
	})

	describe('Text and commands', () => {
		it('Can parse text and command', () => {
			const cursor = new TextCursor('Hello @command(1)')
			const result = parser.parse(cursor)
			expect(result).not.toBeUndefined()
			expect(result?.nodes).toHaveLength(2)
			assert(result?.nodes[0] instanceof TextNode)
			expect(result?.nodes[0].text).toBe('Hello ')
			assert(result?.nodes[1] instanceof CommandNode)
			expect(result?.nodes[1].command).toBe('command')
			expect(result?.nodes[1].args).toHaveLength(1)
			expect(result?.nodes[1].args[0].open).toBe('(')
			expect(result?.nodes[1].args[0].close).toBe(')')
			expect(result?.nodes[1].args[0].document.nodes).toHaveLength(1)
			assert(result?.nodes[1].args[0].document.nodes[0] instanceof TextNode)
			expect(result?.nodes[1].args[0].document.nodes[0].text).toBe('1')
		})

		it('Can parse text command text', () => {
			const cursor = new TextCursor('Hello @command(1) World')
			const result = parser.parse(cursor)
			expect(result).not.toBeUndefined()
			expect(result?.nodes).toHaveLength(3)
			assert(result?.nodes[0] instanceof TextNode)
			expect(result?.nodes[0].text).toBe('Hello ')
			assert(result?.nodes[1] instanceof CommandNode)
			expect(result?.nodes[1].command).toBe('command')
			expect(result?.nodes[1].args).toHaveLength(1)
			expect(result?.nodes[1].args[0].open).toBe('(')
			expect(result?.nodes[1].args[0].close).toBe(')')
			expect(result?.nodes[1].args[0].document.nodes).toHaveLength(1)
			assert(result?.nodes[1].args[0].document.nodes[0] instanceof TextNode)
			expect(result?.nodes[1].args[0].document.nodes[0].text).toBe('1')
			assert(result?.nodes[2] instanceof TextNode)
			expect(result?.nodes[2].text).toBe(' World')
		})

		it('Can parse text command text command text with no args', () => {
			const cursor = new TextCursor('Hello @command World @command2')
			const result = parser.parse(cursor)
			expect(result).not.toBeUndefined()
			expect(result?.nodes).toHaveLength(4)
			assert(result?.nodes[0] instanceof TextNode)
			expect(result?.nodes[0].text).toBe('Hello ')
			assert(result?.nodes[1] instanceof CommandNode)
			expect(result?.nodes[1].command).toBe('command')
			expect(result?.nodes[1].args).toHaveLength(0)
			assert(result?.nodes[2] instanceof TextNode)
			expect(result?.nodes[2].text).toBe(' World ')
			assert(result?.nodes[3] instanceof CommandNode)
			expect(result?.nodes[3].command).toBe('command2')
			expect(result?.nodes[3].args).toHaveLength(0)
		})
	})

	describe('Comments', () => {
		describe('Single line', () => {
			it('Can parse single line comment', () => {
				const cursor = new TextCursor('@; Hello World')
				const result = parser.parse(cursor)
				expect(result).not.toBeUndefined()
				expect(result?.nodes).toHaveLength(1)
				assert(result?.nodes[0] instanceof CommandNode)
				expect(result?.nodes[0].command).toBe(';')
				expect(result?.nodes[0].args).toHaveLength(1)
				expect(result?.nodes[0].args[0].open).toBe('')
				expect(result?.nodes[0].args[0].close).toBe('')
				expect(result?.nodes[0].args[0].document.nodes).toHaveLength(1)
				assert(result?.nodes[0].args[0].document.nodes[0] instanceof TextNode)
				expect(result?.nodes[0].args[0].document.nodes[0].text).toBe(' Hello World')
			})

			it('Can parse a recursive single line comment', () => {
				const cursor = new TextCursor('@; Hello @; World')
				const result = parser.parse(cursor)
				expect(result).not.toBeUndefined()
				expect(result?.nodes).toHaveLength(1)
				assert(result?.nodes[0] instanceof CommandNode)
				expect(result?.nodes[0].command).toBe(';')
				expect(result?.nodes[0].args).toHaveLength(1)
				expect(result?.nodes[0].args[0].open).toBe('')
				expect(result?.nodes[0].args[0].close).toBe('')
				expect(result?.nodes[0].args[0].document.nodes).toHaveLength(2)
				assert(result?.nodes[0].args[0].document.nodes[0] instanceof TextNode)
				expect(result?.nodes[0].args[0].document.nodes[0].text).toBe(' Hello ')
				assert(result?.nodes[0].args[0].document.nodes[1] instanceof CommandNode)
				expect(result?.nodes[0].args[0].document.nodes[1].command).toBe(';')
				expect(result?.nodes[0].args[0].document.nodes[1].args).toHaveLength(1)
				expect(result?.nodes[0].args[0].document.nodes[1].args[0].open).toBe('')
				expect(result?.nodes[0].args[0].document.nodes[1].args[0].close).toBe('')
				expect(result?.nodes[0].args[0].document.nodes[1].args[0].document.nodes).toHaveLength(1)
				assert(result?.nodes[0].args[0].document.nodes[1].args[0].document.nodes[0] instanceof TextNode)
				expect(result?.nodes[0].args[0].document.nodes[1].args[0].document.nodes[0].text).toBe(' World')
			})

			it('Can parse a single line comment with a command', () => {
				const cursor = new TextCursor('@; Hello @command World')
				const result = parser.parse(cursor)
				expect(result).not.toBeUndefined()
				expect(result?.nodes).toHaveLength(1)
				assert(result?.nodes[0] instanceof CommandNode)
				expect(result?.nodes[0].command).toBe(';')
				expect(result?.nodes[0].args).toHaveLength(1)
				expect(result?.nodes[0].args[0].open).toBe('')
				expect(result?.nodes[0].args[0].close).toBe('')
				expect(result?.nodes[0].args[0].document.nodes).toHaveLength(3)
				assert(result?.nodes[0].args[0].document.nodes[0] instanceof TextNode)
				expect(result?.nodes[0].args[0].document.nodes[0].text).toBe(' Hello ')
				assert(result?.nodes[0].args[0].document.nodes[1] instanceof CommandNode)
				expect(result?.nodes[0].args[0].document.nodes[1].command).toBe('command')
				expect(result?.nodes[0].args[0].document.nodes[1].args).toHaveLength(0)
				assert(result?.nodes[0].args[0].document.nodes[2] instanceof TextNode)
				expect(result?.nodes[0].args[0].document.nodes[2].text).toBe(' World')
			})

			it('Can parse a single line comment with a command and an argument', () => {
				const cursor = new TextCursor('@; Hello @command(12344321) World')
				const result = parser.parse(cursor)
				expect(result).not.toBeUndefined()
				expect(result?.nodes).toHaveLength(1)
				assert(result?.nodes[0] instanceof CommandNode)
				expect(result?.nodes[0].command).toBe(';')
				expect(result?.nodes[0].args).toHaveLength(1)
				expect(result?.nodes[0].args[0].open).toBe('')
				expect(result?.nodes[0].args[0].close).toBe('')
				expect(result?.nodes[0].args[0].document.nodes).toHaveLength(3)
				assert(result?.nodes[0].args[0].document.nodes[0] instanceof TextNode)
				expect(result?.nodes[0].args[0].document.nodes[0].text).toBe(' Hello ')
				assert(result?.nodes[0].args[0].document.nodes[1] instanceof CommandNode)
				expect(result?.nodes[0].args[0].document.nodes[1].command).toBe('command')
				expect(result?.nodes[0].args[0].document.nodes[1].args).toHaveLength(1)
				expect(result?.nodes[0].args[0].document.nodes[1].args[0].open).toBe('(')
				expect(result?.nodes[0].args[0].document.nodes[1].args[0].close).toBe(')')
				expect(result?.nodes[0].args[0].document.nodes[1].args[0].document.nodes).toHaveLength(1)
				assert(result?.nodes[0].args[0].document.nodes[1].args[0].document.nodes[0] instanceof TextNode)
				expect(result?.nodes[0].args[0].document.nodes[1].args[0].document.nodes[0].text).toBe('12344321')
				assert(result?.nodes[0].args[0].document.nodes[2] instanceof TextNode)
				expect(result?.nodes[0].args[0].document.nodes[2].text).toBe(' World')
			})
		})

		describe('Multi line comments', () => {
			it('Can parse a multi line comment', () => {
				const cursor = new TextCursor('@;{ Hello World }')
				const result = parser.parse(cursor)
				expect(result).not.toBeUndefined()
				expect(result?.nodes).toHaveLength(1)
				assert(result?.nodes[0] instanceof CommandNode)
				expect(result?.nodes[0].command).toBe(';')
				expect(result?.nodes[0].args).toHaveLength(1)
				expect(result?.nodes[0].args[0].open).toBe('{')
				expect(result?.nodes[0].args[0].close).toBe('}')
				expect(result?.nodes[0].args[0].document.nodes).toHaveLength(1)
				assert(result?.nodes[0].args[0].document.nodes[0] instanceof TextNode)
				expect(result?.nodes[0].args[0].document.nodes[0].text).toBe(' Hello World ')
			})

			it('Can parse a recursive multi line comment', () => {
				const cursor = new TextCursor('@;{ Hello @;{ World }}')
				const result = parser.parse(cursor)
				expect(result).not.toBeUndefined()
				expect(result?.nodes).toHaveLength(1)
				assert(result?.nodes[0] instanceof CommandNode)
				expect(result?.nodes[0].command).toBe(';')
				expect(result?.nodes[0].args).toHaveLength(1)
				expect(result?.nodes[0].args[0].open).toBe('{')
				expect(result?.nodes[0].args[0].close).toBe('}')
				expect(result?.nodes[0].args[0].document.nodes).toHaveLength(2)
				assert(result?.nodes[0].args[0].document.nodes[0] instanceof TextNode)
				expect(result?.nodes[0].args[0].document.nodes[0].text).toBe(' Hello ')
				assert(result?.nodes[0].args[0].document.nodes[1] instanceof CommandNode)
				expect(result?.nodes[0].args[0].document.nodes[1].command).toBe(';')
				expect(result?.nodes[0].args[0].document.nodes[1].args).toHaveLength(1)
				expect(result?.nodes[0].args[0].document.nodes[1].args[0].open).toBe('{')
				expect(result?.nodes[0].args[0].document.nodes[1].args[0].close).toBe('}')
				expect(result?.nodes[0].args[0].document.nodes[1].args[0].document.nodes).toHaveLength(1)
				assert(result?.nodes[0].args[0].document.nodes[1].args[0].document.nodes[0] instanceof TextNode)
				expect(result?.nodes[0].args[0].document.nodes[1].args[0].document.nodes[0].text).toBe(' World ')
			})

			it('Multiple multi-line comments', () => {
				const cursor = new TextCursor('@;{ Hello World }test@;{ Hello World }')
				const result = parser.parse(cursor)
				expect(result).not.toBeUndefined()
				expect(result?.nodes).toHaveLength(3)
				assert(result?.nodes[0] instanceof CommandNode)
				expect(result?.nodes[0].command).toBe(';')
				expect(result?.nodes[0].args).toHaveLength(1)
				expect(result?.nodes[0].args[0].open).toBe('{')
				expect(result?.nodes[0].args[0].close).toBe('}')
				expect(result?.nodes[0].args[0].document.nodes).toHaveLength(1)
				assert(result?.nodes[0].args[0].document.nodes[0] instanceof TextNode)
				expect(result?.nodes[0].args[0].document.nodes[0].text).toBe(' Hello World ')
				assert(result?.nodes[1] instanceof TextNode)
				expect(result?.nodes[1].text).toBe('test')
				assert(result?.nodes[2] instanceof CommandNode)
				expect(result?.nodes[2].command).toBe(';')
				expect(result?.nodes[2].args).toHaveLength(1)
				expect(result?.nodes[2].args[0].open).toBe('{')
				expect(result?.nodes[2].args[0].close).toBe('}')
				expect(result?.nodes[2].args[0].document.nodes).toHaveLength(1)
				assert(result?.nodes[2].args[0].document.nodes[0] instanceof TextNode)
				expect(result?.nodes[2].args[0].document.nodes[0].text).toBe(' Hello World ')
			})
		})

		describe('Single line and multi line comments', () => {
			it('Can parse a multi line comment with a single line comment', () => {
				const cursor = new TextCursor('@;{ Hello @; World }')
				const result = parser.parse(cursor)
				expect(result).not.toBeUndefined()
				expect(result?.nodes).toHaveLength(1)
				assert(result?.nodes[0] instanceof CommandNode)
				expect(result?.nodes[0].command).toBe(';')
				expect(result?.nodes[0].args).toHaveLength(1)
				expect(result?.nodes[0].args[0].open).toBe('{')
				expect(result?.nodes[0].args[0].close).toBe('}')
				expect(result?.nodes[0].args[0].document.nodes).toHaveLength(2)
				assert(result?.nodes[0].args[0].document.nodes[0] instanceof TextNode)
				expect(result?.nodes[0].args[0].document.nodes[0].text).toBe(' Hello ')
				assert(result?.nodes[0].args[0].document.nodes[1] instanceof CommandNode)
				expect(result?.nodes[0].args[0].document.nodes[1].command).toBe(';')
				expect(result?.nodes[0].args[0].document.nodes[1].args).toHaveLength(1)
				expect(result?.nodes[0].args[0].document.nodes[1].args[0].open).toBe('')
				expect(result?.nodes[0].args[0].document.nodes[1].args[0].close).toBe('')
				expect(result?.nodes[0].args[0].document.nodes[1].args[0].document.nodes).toHaveLength(1)
				assert(result?.nodes[0].args[0].document.nodes[1].args[0].document.nodes[0] instanceof TextNode)
				expect(result?.nodes[0].args[0].document.nodes[1].args[0].document.nodes[0].text).toBe(' World ')
			})

			it('Can parse a multi line comment with a single line comment and a multi line comment', () => {
				const cursor = new TextCursor('@;{ Hello @; World @;{ Foo Bar }}')
				const result = parser.parse(cursor)
				expect(result).not.toBeUndefined()
				expect(result?.nodes).toHaveLength(1)
				assert(result?.nodes[0] instanceof CommandNode)
				expect(result?.nodes[0].command).toBe(';')
				expect(result?.nodes[0].args).toHaveLength(1)
				expect(result?.nodes[0].args[0].open).toBe('{')
				expect(result?.nodes[0].args[0].close).toBe('}')
				expect(result?.nodes[0].args[0].document.nodes).toHaveLength(2)
				assert(result?.nodes[0].args[0].document.nodes[0] instanceof TextNode)
				expect(result?.nodes[0].args[0].document.nodes[0].text).toBe(' Hello ')
				assert(result?.nodes[0].args[0].document.nodes[1] instanceof CommandNode)
				expect(result?.nodes[0].args[0].document.nodes[1].command).toBe(';')
				expect(result?.nodes[0].args[0].document.nodes[1].args).toHaveLength(1)
				expect(result?.nodes[0].args[0].document.nodes[1].args[0].open).toBe('')
				expect(result?.nodes[0].args[0].document.nodes[1].args[0].close).toBe('')
				expect(result?.nodes[0].args[0].document.nodes[1].args[0].document.nodes).toHaveLength(2)
				assert(result?.nodes[0].args[0].document.nodes[1].args[0].document.nodes[0] instanceof TextNode)
				expect(result?.nodes[0].args[0].document.nodes[1].args[0].document.nodes[0].text).toBe(' World ')
				assert(result?.nodes[0].args[0].document.nodes[1].args[0].document.nodes[1] instanceof CommandNode)
				expect(result?.nodes[0].args[0].document.nodes[1].args[0].document.nodes[1].command).toBe(';')
				expect(result?.nodes[0].args[0].document.nodes[1].args[0].document.nodes[1].args).toHaveLength(1)
				expect(result?.nodes[0].args[0].document.nodes[1].args[0].document.nodes[1].args[0].open).toBe('{')
				expect(result?.nodes[0].args[0].document.nodes[1].args[0].document.nodes[1].args[0].close).toBe('}')
				expect(result?.nodes[0].args[0].document.nodes[1].args[0].document.nodes[1].args[0].document.nodes).toHaveLength(1)
				assert(result?.nodes[0].args[0].document.nodes[1].args[0].document.nodes[1].args[0].document.nodes[0] instanceof TextNode)
				expect(result?.nodes[0].args[0].document.nodes[1].args[0].document.nodes[1].args[0].document.nodes[0].text).toBe(' Foo Bar ')
			})

			it('Can parse a single line comment wih a multi line comment', () => {
				const cursor = new TextCursor('@; Hello @;{ World }')
				const result = parser.parse(cursor)
				expect(result).not.toBeUndefined()
				expect(result?.nodes).toHaveLength(1)
				assert(result?.nodes[0] instanceof CommandNode)
				expect(result?.nodes[0].command).toBe(';')
				expect(result?.nodes[0].args).toHaveLength(1)
				expect(result?.nodes[0].args[0].open).toBe('')
				expect(result?.nodes[0].args[0].close).toBe('')
				expect(result?.nodes[0].args[0].document.nodes).toHaveLength(2)
				assert(result?.nodes[0].args[0].document.nodes[0] instanceof TextNode)
				expect(result?.nodes[0].args[0].document.nodes[0].text).toBe(' Hello ')
				assert(result?.nodes[0].args[0].document.nodes[1] instanceof CommandNode)
				expect(result?.nodes[0].args[0].document.nodes[1].command).toBe(';')
				expect(result?.nodes[0].args[0].document.nodes[1].args).toHaveLength(1)
				expect(result?.nodes[0].args[0].document.nodes[1].args[0].open).toBe('{')
				expect(result?.nodes[0].args[0].document.nodes[1].args[0].close).toBe('}')
				expect(result?.nodes[0].args[0].document.nodes[1].args[0].document.nodes).toHaveLength(1)
				assert(result?.nodes[0].args[0].document.nodes[1].args[0].document.nodes[0] instanceof TextNode)
				expect(result?.nodes[0].args[0].document.nodes[1].args[0].document.nodes[0].text).toBe(' World ')
			})
		})
	})
})
